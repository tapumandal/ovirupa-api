server.port = 8081
server.address = 192.168.0.131
spring.jpa.database-platform=org.hibernate.dialect.MySQL5InnoDBDialect
spring.jpa.hibernate.ddl-auto=update
spring.datasource.driverClassName=com.mysql.cj.jdbc.Driver
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
#spring.jpa.properties.hibernate.jdbc.time_zone=Asia/Dhaka
#spring.datasource.url=jdbc:mysql://167.99.29.63:3307/timtom_db?useTimezone=true&serverTimezone=Asia/Dhaka
#spring.datasource.url=jdbc:mysql://167.99.29.63:3307/test_ecommerce_db?useTimezone=true&serverTimezone=Asia/Dhaka
spring.datasource.url=jdbc:mysql://localhost:3306/test_ecommerce_db?useTimezone=true&serverTimezone=Asia/Dhaka
#spring.datasource.url=jdbc:mysql://ovirupa.com.bd:3306/timtom_db_test?useTimezone=true&serverTimezone=Asia/Dhaka

#Local
#spring.datasource.url=jdbc:mysql://localhost:3306/timtom_test?serverTimezone=UTC&useLegacyDatetimeCode=false
#base.path.api=http://ovirupa.com.bd:8081/api/v1/
#base.path.api=https://api.ovirupa.com.bd/api/v1/
#base.path.api=http://localhost:8081/api/v1/
base.path.api=http://192.168.0.131:8081/api/v1/

#base.path.front = https://ovirupa.com.bd/
base.path.front = http://192.168.0.131:8081/




#http://157.230.38.182/
#Live Test DB PORT 8081
#spring.datasource.url=jdbc:mysql://157.230.38.182:3306/timtom_db_test?useTimezone=false
#base.path.api=http://18.138.152.16:8081/api/v1/

#Live Production
#spring.datasource.url=jdbc:mysql://ovirupa.shop:3307/jewellery_db?useTimezone=false
#base.path.api=http://ovirupa.shop:8081/api/v1/

spring.datasource.username=root
spring.datasource.password=
#spring.datasource.username=root
#spring.datasource.password=password-ovirupa-user

storage.path=public/images/
file.upload-dir=/ovirupa/public/images



## MULTIPART (MultipartProperties)
# Enable multipart uploads
spring.servlet.multipart.enabled=true
# Threshold after which files are written to disk.
spring.servlet.multipart.file-size-threshold=2KB
# Max file size.
spring.servlet.multipart.max-file-size=200MB
# Max Request Size
spring.servlet.multipart.max-request-size=215MB


#OTP SMS
sms.api.key = A101DFA226A0C7202F77CB81651C
sms.from = 8809612737373




## MySql pull then run with credentials
# docker run --name mysql-server -p 3307:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=timtom_db_test -e MYSQL_USER=ovirupa -e MYSQL_PASSWORD=password-ovirupa -d mysql:5.6
#
# docker run --name mysql-server -p 3307:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=timtom_db_test -e MYSQL_USER=user-ovirupa -e MYSQL_PASSWORD=password-ovirupa -d mysql

# docker run --cap-add=sys_nice --name mysql-server -p 3307:3306 -e MYSQL_ROOT_PASSWORD=password -e MYSQL_DATABASE=timtom_db -e MYSQL_USER=ovirupa -e MYSQL_PASSWORD=password -d mysql

## phpmyadmin pull then run with mysql server linked
#docker run --name myphpmyadmin -d --link mysql-server:db -p 8001:80 phpmyadmin/phpmyadmin

#docker run --name myphpmyadmin -d -e PMA_HOST=db-mysql-sgp1-30556-do-user-9099623-0.b.db.ondigitalocean.com -e PMA_USER=doadmin -e PMA_PASSWORD=bmvsLjDuIGGcomSE -p 8001:80 phpmyadmin/phpmyadmin

## Spring app Build
# docker build . -t ims-server-app
## App Run and link with mysql server
# docker run -p 8080:8080 --name ims-server-app  --link mysql-server:mysql -d ims-server-app

#RUN AND BUILD TOGETHER WITHN SPECIFIC NETWORKS
#docker build -t ims-server-app . && docker run  -p 8080:8080 --name ims-server-app  --link mysql-server:mysql -d ims-server-app
#
#
#
#
#
#   LIVE TEST DOCKER COMMAND WITH VOLUME
#   docker run --name=sh-api-test -p 8082:8081 -v super-haat-vol-test:/ovirupa -d --rm tapumandal/ovirupa-api-test

#docker run --name=ovirupa-api -p 8081:8081 -v ovirupa-vol:/ovirupa -d tapumandal/ovirupa-api

#docker run --name=ovirupa-front -p 4200:80 -d --rm tapumandal/ovirupa-front

#Docker logs clear
#truncate -s 0 /var/lib/docker/containers/*/*-json.log

#docker stop ovirupa-api
#docker rm ovirupa-api
#docker rmi tapumandal/ovirupa-api
#docker run --name=ovirupa-api -p 8081:8081 -v ovirupa-vol:/ovirupa -d --rm tapumandal/ovirupa-api

#Outside LOG storage
#docker run --log-driver=journald --name=ovirupa-api -p 8081:8081 -v ovirupa-vol:/ovirupa -d tapumandal/ovirupa-api

#DOCEK LOG READ
#journalctl -u docker CONTAINER_NAME=ovirupa-api

#Delete LOG
#journalctl --vacuum-time=2